Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: dev

  EnvironmentFlag:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: blue

  # we will be Importing in the name of the s3 bucket from the Export of master-stack-pipeline.yaml
  # BuildArtifactsBucket:
  #   Description: !Sub existing s3 bucket in ${AWS::Region}, to reference for nested templates
  #   Type: String
  #   Default: ref-arch-msi/dev-blue-artifactbucket

  GitHubUser:
    Type: String
    Description: Your username on GitHub.
    Default: livid727 

  GitHubRepoPlatform:
    Description: first github repo which contains the nested stacks
    Type: String
    Default: dev-blue-nestedstack

  GitHubRepoECS:
    Type: String
    Default: ecs-demo-php-simple-app
    Description: The repo name of the sample service.

  GitHubBranch:
    Type: String
    Default: master
    Description: The branch of the repo to continuously deploy.

  GitHubToken:
    Type: String
    Description: Token for the user specified above. (https://github.com/settings/tokens)
    Default: a32082e643ecb9500d4efbb846e3cd24b8b892cb 


Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      EnvironmentName:
        default: "dev"
      GitHubUser:
        default: "User"
      GitHubRepoECS:
        default: "Repo"
      GitHubBranch:
        default: "Branch"
      GitHubToken:
        default: "Personal Access Token"
    ParameterGroups:
      - Label:
          default: GitHub Configuration
        Parameters:
          - GitHubRepoECS
          - GitHubBranch
          - GitHubUser
          - GitHubToken
      - Label:
          default: Environment
        Parameters:
          - EnvironmentName
          - EnvironmentFlag


Resources:

## Network Resources
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
#      TemplateURL: !Sub https://s3-${AWS::Region}/${BuildArtifactsBucket}/vpc.yaml
      TemplateURL: !Join
        - "/"
        - - !Sub "https://s3-${AWS::Region}.amazonaws.com"
          - Fn::ImportValue: !Sub ${EnvironmentName}-${EnvironmentFlag}-BuildArtifacts
          - vpc.yaml
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        EnvironmentFlag: !Ref EnvironmentFlag
        VpcCIDR: 10.215.0.0/16
        PublicSubnet1CIDR: 10.215.10.0/24
        PublicSubnet2CIDR: 10.215.20.0/24
        PrivateSubnet1CIDR: 10.215.30.0/24
        PrivateSubnet2CIDR: 10.215.31.0/24

  SecurityGroups:
    Type: AWS::CloudFormation::Stack
    DependsOn: 'VPC'
    Properties:
#      TemplateURL: !Sub https://s3-${AWS::Region}/${BuildArtifactsBucket}/security-groups.yaml
      TemplateURL: !Join
        - "/"
        - - !Sub "https://s3-${AWS::Region}.amazonaws.com"
          - Fn::ImportValue: !Sub ${EnvironmentName}-${EnvironmentFlag}-BuildArtifacts
          - security-groups.yaml
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        EnvironmentFlag: !Ref EnvironmentFlag
        VpcId: !GetAtt VPC.Outputs.VpcId

## ECS resources
  ECSCluster:
    Type: AWS::CloudFormation::Stack
    DependsOn: 'SecurityGroups'
    Properties:
#      TemplateURL: !Sub https://s3-${AWS::Region}/${BuildArtifactsBucket}/ecs-cluster.yaml
      TemplateURL: !Join
        - "/"
        - - !Sub "https://s3-${AWS::Region}.amazonaws.com"
          - Fn::ImportValue: !Sub ${EnvironmentName}-${EnvironmentFlag}-BuildArtifacts
          - ecs-cluster.yaml
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        EnvironmentFlag: !Ref EnvironmentFlag
        SecurityGroup: !GetAtt SecurityGroups.Outputs.ECSHostSecurityGroup
        Subnets: !GetAtt VPC.Outputs.PrivateSubnets
        VpcId: !GetAtt VPC.Outputs.VpcId

  ECSAppLoadBalancer:
    Type: AWS::CloudFormation::Stack
    DependsOn: 'SecurityGroups'
    Properties:
#      TemplateURL: !Sub https://s3-${AWS::Region}/${BuildArtifactsBucket}/ecs-app-load-balancer.yaml
      TemplateURL: !Join
        - "/"
        - - !Sub "https://s3-${AWS::Region}.amazonaws.com"
          - Fn::ImportValue: !Sub ${EnvironmentName}-${EnvironmentFlag}-BuildArtifacts
          - ecs-app-load-balancer.yaml
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        EnvironmentFlag: !Ref EnvironmentFlag
        Subnets: !GetAtt VPC.Outputs.PublicSubnets
        SecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup
        VpcId: !GetAtt VPC.Outputs.VpcId


## application pipeline for ECS
  ECSDeploymentPipeline:
    Type: AWS::CloudFormation::Stack
    Properties:
#      TemplateURL: !Sub https://s3-${AWS::Region}/${BuildArtifactsBucket}/ecs-deployment-pipeline.yaml
      TemplateURL: !Join
        - "/"
        - - !Sub "https://s3-${AWS::Region}.amazonaws.com"
          - Fn::ImportValue: !Sub ${EnvironmentName}-${EnvironmentFlag}-BuildArtifacts
          - ecs-deployment-pipeline.yaml
      Parameters:
        Cluster: !GetAtt ECSCluster.Outputs.ClusterName
        GitHubUser: !Ref GitHubUser
        GitHubToken: !Ref GitHubToken
        GitHubRepoECS: !Ref GitHubRepoECS
        GitHubBranch: !Ref GitHubBranch
        TargetGroup: !GetAtt ECSAppLoadBalancer.Outputs.TargetGroup
        TemplateBucket: !Sub ecs-refarch-cicd-template-bucket-${AWS::Region}

  #  LambdaDeploymentPipeline:
  #    Type: AWS::CloudFormation::Stack
  #    Properties:
  #      TemplateURL: https://s3.amazonaws.com/ecs-refarch-continuous-deployment/templates/lambda-deployment-pipeline.yaml
  #      Parameters:
  #        Cluster: !GetAtt Cluster.Outputs.ClusterName
  #        GitHubUser: !Ref GitHubUser
  #        GitHubToken: !Ref GitHubToken
  #        GitHubRepo: !Ref GitHubRepo
  #        GitHubBranch: !Ref GitHubBranch
  #        TargetGroup: !GetAtt LoadBalancer.Outputs.TargetGroup
  #        TemplateBucket: !Sub lambda-refarch-cicd-template-bucket-${AWS::Region}

Outputs:
  ECSLoadBalancerUrl:
    Description: ECS Application Loadbalancer's URL
    Value: !GetAtt ECSAppLoadBalancer.Outputs.LoadBalancerUrl

  ECSPipelineUrl:
    Description: The continuous deployment pipeline in the AWS Management Console.
    Value: !GetAtt ECSDeploymentPipeline.Outputs.PipelineUrl

  MasterStackName:
    Description: name of this master nested stack
    Value: !Sub "${EnvironmentName}-${EnvironmentFlag}-MasterStack"
    Export:
      Name: !Join [ "-", [ !Ref EnvironmentName, !Ref EnvironmentFlag, "MasterStack" ]]
